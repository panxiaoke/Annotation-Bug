//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 8 files.
  struct file {
    /// Resource file `EURUSD_Daily.csv`.
    static let eurusd_DailyCsv = Rswift.FileResource(bundle: R.hostingBundle, name: "EURUSD_Daily", pathExtension: "csv")
    /// Resource file `ExampleListDataSource.plist`.
    static let exampleListDataSourcePlist = Rswift.FileResource(bundle: R.hostingBundle, name: "ExampleListDataSource", pathExtension: "plist")
    /// Resource file `INDU_Daily.csv`.
    static let indu_DailyCsv = Rswift.FileResource(bundle: R.hostingBundle, name: "INDU_Daily", pathExtension: "csv")
    /// Resource file `SciChart_BerryBlue.plist`.
    static let sciChart_BerryBluePlist = Rswift.FileResource(bundle: R.hostingBundle, name: "SciChart_BerryBlue", pathExtension: "plist")
    /// Resource file `TradeTicks.csv`.
    static let tradeTicksCsv = Rswift.FileResource(bundle: R.hostingBundle, name: "TradeTicks", pathExtension: "csv")
    /// Resource file `WaveformData.txt`.
    static let waveformDataTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "WaveformData", pathExtension: "txt")
    /// Resource file `objectivec.plist`.
    static let objectivecPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "objectivec", pathExtension: "plist")
    /// Resource file `swift.plist`.
    static let swiftPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "swift", pathExtension: "plist")
    
    /// `bundle.url(forResource: "EURUSD_Daily", withExtension: "csv")`
    static func eurusd_DailyCsv(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.eurusd_DailyCsv
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "ExampleListDataSource", withExtension: "plist")`
    static func exampleListDataSourcePlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.exampleListDataSourcePlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "INDU_Daily", withExtension: "csv")`
    static func indu_DailyCsv(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.indu_DailyCsv
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SciChart_BerryBlue", withExtension: "plist")`
    static func sciChart_BerryBluePlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sciChart_BerryBluePlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "TradeTicks", withExtension: "csv")`
    static func tradeTicksCsv(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tradeTicksCsv
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "WaveformData", withExtension: "txt")`
    static func waveformDataTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.waveformDataTxt
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "objectivec", withExtension: "plist")`
    static func objectivecPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.objectivecPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "swift", withExtension: "plist")`
    static func swiftPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 62 images.
  struct image {
    /// Image `Annotations`.
    static let annotations = Rswift.ImageResource(bundle: R.hostingBundle, name: "Annotations")
    /// Image `BandChart`.
    static let bandChart = Rswift.ImageResource(bundle: R.hostingBundle, name: "BandChart")
    /// Image `BubbleChart`.
    static let bubbleChart = Rswift.ImageResource(bundle: R.hostingBundle, name: "BubbleChart")
    /// Image `BurgerMenu`.
    static let burgerMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "BurgerMenu")
    /// Image `CandlestickChart`.
    static let candlestickChart = Rswift.ImageResource(bundle: R.hostingBundle, name: "CandlestickChart")
    /// Image `Circle`.
    static let circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "Circle")
    /// Image `ColumnChart`.
    static let columnChart = Rswift.ImageResource(bundle: R.hostingBundle, name: "ColumnChart")
    /// Image `CubeChart`.
    static let cubeChart = Rswift.ImageResource(bundle: R.hostingBundle, name: "CubeChart")
    /// Image `FeatureChart`.
    static let featureChart = Rswift.ImageResource(bundle: R.hostingBundle, name: "FeatureChart")
    /// Image `FlipHorizontally`.
    static let flipHorizontally = Rswift.ImageResource(bundle: R.hostingBundle, name: "FlipHorizontally")
    /// Image `FlipVertically`.
    static let flipVertically = Rswift.ImageResource(bundle: R.hostingBundle, name: "FlipVertically")
    /// Image `GreenArrow`.
    static let greenArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "GreenArrow")
    /// Image `HeatmapChart`.
    static let heatmapChart = Rswift.ImageResource(bundle: R.hostingBundle, name: "HeatmapChart")
    /// Image `Home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home")
    /// Image `LineChart`.
    static let lineChart = Rswift.ImageResource(bundle: R.hostingBundle, name: "LineChart")
    /// Image `MainView`.
    static let mainView = Rswift.ImageResource(bundle: R.hostingBundle, name: "MainView")
    /// Image `MountainChart`.
    static let mountainChart = Rswift.ImageResource(bundle: R.hostingBundle, name: "MountainChart")
    /// Image `RealTime`.
    static let realTime = Rswift.ImageResource(bundle: R.hostingBundle, name: "RealTime")
    /// Image `RedArrow`.
    static let redArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "RedArrow")
    /// Image `RightArrow`.
    static let rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "RightArrow")
    /// Image `Rotate`.
    static let rotate = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rotate")
    /// Image `RubberBandZoom`.
    static let rubberBandZoom = Rswift.ImageResource(bundle: R.hostingBundle, name: "RubberBandZoom")
    /// Image `SCIPinchZoomModifier`.
    static let sciPinchZoomModifier = Rswift.ImageResource(bundle: R.hostingBundle, name: "SCIPinchZoomModifier")
    /// Image `SCIRolloverModifier`.
    static let sciRolloverModifier = Rswift.ImageResource(bundle: R.hostingBundle, name: "SCIRolloverModifier")
    /// Image `SCIXAxisDragModifier`.
    static let scixAxisDragModifier = Rswift.ImageResource(bundle: R.hostingBundle, name: "SCIXAxisDragModifier")
    /// Image `SCIYAxisDragModifier`.
    static let sciyAxisDragModifier = Rswift.ImageResource(bundle: R.hostingBundle, name: "SCIYAxisDragModifier")
    /// Image `SCIZoomExtentsModifier`.
    static let sciZoomExtentsModifier = Rswift.ImageResource(bundle: R.hostingBundle, name: "SCIZoomExtentsModifier")
    /// Image `ScatterChart`.
    static let scatterChart = Rswift.ImageResource(bundle: R.hostingBundle, name: "ScatterChart")
    /// Image `Settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "Settings")
    /// Image `SideBarMenu`.
    static let sideBarMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "SideBarMenu")
    /// Image `SourceCode`.
    static let sourceCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "SourceCode")
    /// Image `StackedMountainChart`.
    static let stackedMountainChart = Rswift.ImageResource(bundle: R.hostingBundle, name: "StackedMountainChart")
    /// Image `StartPage`.
    static let startPage = Rswift.ImageResource(bundle: R.hostingBundle, name: "StartPage")
    /// Image `Weather_Storm`.
    static let weather_Storm = Rswift.ImageResource(bundle: R.hostingBundle, name: "Weather_Storm")
    /// Image `XCodeProj`.
    static let xCodeProj = Rswift.ImageResource(bundle: R.hostingBundle, name: "XCodeProj")
    /// Image `annotation_bg_red`.
    static let annotation_bg_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "annotation_bg_red")
    /// Image `color_picker_green`.
    static let color_picker_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "color_picker_green")
    /// Image `color_picker_purple`.
    static let color_picker_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "color_picker_purple")
    /// Image `color_picker_red`.
    static let color_picker_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "color_picker_red")
    /// Image `edit_toolbar_colse`.
    static let edit_toolbar_colse = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_toolbar_colse")
    /// Image `edit_toolbar_delete`.
    static let edit_toolbar_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_toolbar_delete")
    /// Image `edit_toolbar_draw`.
    static let edit_toolbar_draw = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_toolbar_draw")
    /// Image `edit_toolbar_share`.
    static let edit_toolbar_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_toolbar_share")
    /// Image `edit_toolbar_text`.
    static let edit_toolbar_text = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_toolbar_text")
    /// Image `edit_toolbar_undo`.
    static let edit_toolbar_undo = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_toolbar_undo")
    /// Image `forex_annotation_hidden`.
    static let forex_annotation_hidden = Rswift.ImageResource(bundle: R.hostingBundle, name: "forex_annotation_hidden")
    /// Image `forex_annotation_hiden`.
    static let forex_annotation_hiden = Rswift.ImageResource(bundle: R.hostingBundle, name: "forex_annotation_hiden")
    /// Image `forex_annotation_show`.
    static let forex_annotation_show = Rswift.ImageResource(bundle: R.hostingBundle, name: "forex_annotation_show")
    /// Image `forex_info_edit`.
    static let forex_info_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "forex_info_edit")
    /// Image `forex_landscape_close`.
    static let forex_landscape_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "forex_landscape_close")
    /// Image `forex_share_close`.
    static let forex_share_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "forex_share_close")
    /// Image `forex_share_moments`.
    static let forex_share_moments = Rswift.ImageResource(bundle: R.hostingBundle, name: "forex_share_moments")
    /// Image `forex_share_qq`.
    static let forex_share_qq = Rswift.ImageResource(bundle: R.hostingBundle, name: "forex_share_qq")
    /// Image `forex_share_sina`.
    static let forex_share_sina = Rswift.ImageResource(bundle: R.hostingBundle, name: "forex_share_sina")
    /// Image `forex_share_wechat`.
    static let forex_share_wechat = Rswift.ImageResource(bundle: R.hostingBundle, name: "forex_share_wechat")
    /// Image `forex_share_zone`.
    static let forex_share_zone = Rswift.ImageResource(bundle: R.hostingBundle, name: "forex_share_zone")
    /// Image `line_picker_horizontal`.
    static let line_picker_horizontal = Rswift.ImageResource(bundle: R.hostingBundle, name: "line_picker_horizontal")
    /// Image `line_picker_slash`.
    static let line_picker_slash = Rswift.ImageResource(bundle: R.hostingBundle, name: "line_picker_slash")
    /// Image `line_picker_vertical`.
    static let line_picker_vertical = Rswift.ImageResource(bundle: R.hostingBundle, name: "line_picker_vertical")
    /// Image `toolbar_color_picker`.
    static let toolbar_color_picker = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar_color_picker")
    /// Image `toolbar_delete_disabled`.
    static let toolbar_delete_disabled = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar_delete_disabled")
    /// Image `toolbar_undo_disabled`.
    static let toolbar_undo_disabled = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar_undo_disabled")
    
    /// `UIImage(named: "Annotations", bundle: ..., traitCollection: ...)`
    static func annotations(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.annotations, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BandChart", bundle: ..., traitCollection: ...)`
    static func bandChart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bandChart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BubbleChart", bundle: ..., traitCollection: ...)`
    static func bubbleChart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bubbleChart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BurgerMenu", bundle: ..., traitCollection: ...)`
    static func burgerMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.burgerMenu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CandlestickChart", bundle: ..., traitCollection: ...)`
    static func candlestickChart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.candlestickChart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Circle", bundle: ..., traitCollection: ...)`
    static func circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ColumnChart", bundle: ..., traitCollection: ...)`
    static func columnChart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.columnChart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CubeChart", bundle: ..., traitCollection: ...)`
    static func cubeChart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cubeChart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "FeatureChart", bundle: ..., traitCollection: ...)`
    static func featureChart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.featureChart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "FlipHorizontally", bundle: ..., traitCollection: ...)`
    static func flipHorizontally(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flipHorizontally, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "FlipVertically", bundle: ..., traitCollection: ...)`
    static func flipVertically(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flipVertically, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "GreenArrow", bundle: ..., traitCollection: ...)`
    static func greenArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "HeatmapChart", bundle: ..., traitCollection: ...)`
    static func heatmapChart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heatmapChart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LineChart", bundle: ..., traitCollection: ...)`
    static func lineChart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lineChart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MainView", bundle: ..., traitCollection: ...)`
    static func mainView(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mainView, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MountainChart", bundle: ..., traitCollection: ...)`
    static func mountainChart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mountainChart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "RealTime", bundle: ..., traitCollection: ...)`
    static func realTime(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.realTime, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "RedArrow", bundle: ..., traitCollection: ...)`
    static func redArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.redArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "RightArrow", bundle: ..., traitCollection: ...)`
    static func rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rotate", bundle: ..., traitCollection: ...)`
    static func rotate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rotate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "RubberBandZoom", bundle: ..., traitCollection: ...)`
    static func rubberBandZoom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rubberBandZoom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SCIPinchZoomModifier", bundle: ..., traitCollection: ...)`
    static func sciPinchZoomModifier(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sciPinchZoomModifier, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SCIRolloverModifier", bundle: ..., traitCollection: ...)`
    static func sciRolloverModifier(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sciRolloverModifier, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SCIXAxisDragModifier", bundle: ..., traitCollection: ...)`
    static func scixAxisDragModifier(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scixAxisDragModifier, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SCIYAxisDragModifier", bundle: ..., traitCollection: ...)`
    static func sciyAxisDragModifier(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sciyAxisDragModifier, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SCIZoomExtentsModifier", bundle: ..., traitCollection: ...)`
    static func sciZoomExtentsModifier(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sciZoomExtentsModifier, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ScatterChart", bundle: ..., traitCollection: ...)`
    static func scatterChart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scatterChart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SideBarMenu", bundle: ..., traitCollection: ...)`
    static func sideBarMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sideBarMenu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SourceCode", bundle: ..., traitCollection: ...)`
    static func sourceCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sourceCode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "StackedMountainChart", bundle: ..., traitCollection: ...)`
    static func stackedMountainChart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stackedMountainChart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "StartPage", bundle: ..., traitCollection: ...)`
    static func startPage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.startPage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Weather_Storm", bundle: ..., traitCollection: ...)`
    static func weather_Storm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weather_Storm, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "XCodeProj", bundle: ..., traitCollection: ...)`
    static func xCodeProj(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xCodeProj, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "annotation_bg_red", bundle: ..., traitCollection: ...)`
    static func annotation_bg_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.annotation_bg_red, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "color_picker_green", bundle: ..., traitCollection: ...)`
    static func color_picker_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.color_picker_green, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "color_picker_purple", bundle: ..., traitCollection: ...)`
    static func color_picker_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.color_picker_purple, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "color_picker_red", bundle: ..., traitCollection: ...)`
    static func color_picker_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.color_picker_red, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "edit_toolbar_colse", bundle: ..., traitCollection: ...)`
    static func edit_toolbar_colse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_toolbar_colse, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "edit_toolbar_delete", bundle: ..., traitCollection: ...)`
    static func edit_toolbar_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_toolbar_delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "edit_toolbar_draw", bundle: ..., traitCollection: ...)`
    static func edit_toolbar_draw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_toolbar_draw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "edit_toolbar_share", bundle: ..., traitCollection: ...)`
    static func edit_toolbar_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_toolbar_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "edit_toolbar_text", bundle: ..., traitCollection: ...)`
    static func edit_toolbar_text(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_toolbar_text, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "edit_toolbar_undo", bundle: ..., traitCollection: ...)`
    static func edit_toolbar_undo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_toolbar_undo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "forex_annotation_hidden", bundle: ..., traitCollection: ...)`
    static func forex_annotation_hidden(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forex_annotation_hidden, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "forex_annotation_hiden", bundle: ..., traitCollection: ...)`
    static func forex_annotation_hiden(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forex_annotation_hiden, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "forex_annotation_show", bundle: ..., traitCollection: ...)`
    static func forex_annotation_show(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forex_annotation_show, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "forex_info_edit", bundle: ..., traitCollection: ...)`
    static func forex_info_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forex_info_edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "forex_landscape_close", bundle: ..., traitCollection: ...)`
    static func forex_landscape_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forex_landscape_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "forex_share_close", bundle: ..., traitCollection: ...)`
    static func forex_share_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forex_share_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "forex_share_moments", bundle: ..., traitCollection: ...)`
    static func forex_share_moments(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forex_share_moments, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "forex_share_qq", bundle: ..., traitCollection: ...)`
    static func forex_share_qq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forex_share_qq, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "forex_share_sina", bundle: ..., traitCollection: ...)`
    static func forex_share_sina(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forex_share_sina, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "forex_share_wechat", bundle: ..., traitCollection: ...)`
    static func forex_share_wechat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forex_share_wechat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "forex_share_zone", bundle: ..., traitCollection: ...)`
    static func forex_share_zone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forex_share_zone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "line_picker_horizontal", bundle: ..., traitCollection: ...)`
    static func line_picker_horizontal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line_picker_horizontal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "line_picker_slash", bundle: ..., traitCollection: ...)`
    static func line_picker_slash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line_picker_slash, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "line_picker_vertical", bundle: ..., traitCollection: ...)`
    static func line_picker_vertical(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line_picker_vertical, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar_color_picker", bundle: ..., traitCollection: ...)`
    static func toolbar_color_picker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbar_color_picker, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar_delete_disabled", bundle: ..., traitCollection: ...)`
    static func toolbar_delete_disabled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbar_delete_disabled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar_undo_disabled", bundle: ..., traitCollection: ...)`
    static func toolbar_undo_disabled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbar_undo_disabled, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 18 nibs.
  struct nib {
    /// Nib `AddPointsPerformanceLayout`.
    static let addPointsPerformanceLayout = _R.nib._AddPointsPerformanceLayout()
    /// Nib `AddRemoveSeriesChartLayout`.
    static let addRemoveSeriesChartLayout = _R.nib._AddRemoveSeriesChartLayout()
    /// Nib `CustomCursorViewSwift`.
    static let customCursorViewSwift = _R.nib._CustomCursorViewSwift()
    /// Nib `CustomModifierLayout`.
    static let customModifierLayout = _R.nib._CustomModifierLayout()
    /// Nib `CustomTooltipViewSwift`.
    static let customTooltipViewSwift = _R.nib._CustomTooltipViewSwift()
    /// Nib `HeatmapChartLayout`.
    static let heatmapChartLayout = _R.nib._HeatmapChartLayout()
    /// Nib `LaunchScreen~ipad`.
    static let launchScreenIpad = _R.nib._LaunchScreenIpad()
    /// Nib `MultiPaneStockChartLayout`.
    static let multiPaneStockChartLayout = _R.nib._MultiPaneStockChartLayout()
    /// Nib `OscilloscopeLayout`.
    static let oscilloscopeLayout = _R.nib._OscilloscopeLayout()
    /// Nib `RealtimeChartLayout`.
    static let realtimeChartLayout = _R.nib._RealtimeChartLayout()
    /// Nib `RealtimeGhostTracesLayout`.
    static let realtimeGhostTracesLayout = _R.nib._RealtimeGhostTracesLayout()
    /// Nib `RealtimeTickingStockChartLayout`.
    static let realtimeTickingStockChartLayout = _R.nib._RealtimeTickingStockChartLayout()
    /// Nib `SCDLoadingView`.
    static let scdLoadingView = _R.nib._SCDLoadingView()
    /// Nib `SCSExampleTableViewCell`.
    static let scsExampleTableViewCell = _R.nib._SCSExampleTableViewCell()
    /// Nib `SingleChartLayout`.
    static let singleChartLayout = _R.nib._SingleChartLayout()
    /// Nib `SinglePieChartWithLegendLayout`.
    static let singlePieChartWithLegendLayout = _R.nib._SinglePieChartWithLegendLayout()
    /// Nib `SyncMultipleChartsLayout`.
    static let syncMultipleChartsLayout = _R.nib._SyncMultipleChartsLayout()
    /// Nib `UsingThemeManagerLayout`.
    static let usingThemeManagerLayout = _R.nib._UsingThemeManagerLayout()
    
    /// `UINib(name: "AddPointsPerformanceLayout", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addPointsPerformanceLayout) instead")
    static func addPointsPerformanceLayout(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addPointsPerformanceLayout)
    }
    
    /// `UINib(name: "AddRemoveSeriesChartLayout", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addRemoveSeriesChartLayout) instead")
    static func addRemoveSeriesChartLayout(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addRemoveSeriesChartLayout)
    }
    
    /// `UINib(name: "CustomCursorViewSwift", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customCursorViewSwift) instead")
    static func customCursorViewSwift(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customCursorViewSwift)
    }
    
    /// `UINib(name: "CustomModifierLayout", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customModifierLayout) instead")
    static func customModifierLayout(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customModifierLayout)
    }
    
    /// `UINib(name: "CustomTooltipViewSwift", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customTooltipViewSwift) instead")
    static func customTooltipViewSwift(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customTooltipViewSwift)
    }
    
    /// `UINib(name: "HeatmapChartLayout", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.heatmapChartLayout) instead")
    static func heatmapChartLayout(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.heatmapChartLayout)
    }
    
    /// `UINib(name: "LaunchScreen~ipad", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.launchScreenIpad) instead")
    static func launchScreenIpad(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.launchScreenIpad)
    }
    
    /// `UINib(name: "MultiPaneStockChartLayout", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.multiPaneStockChartLayout) instead")
    static func multiPaneStockChartLayout(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.multiPaneStockChartLayout)
    }
    
    /// `UINib(name: "OscilloscopeLayout", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oscilloscopeLayout) instead")
    static func oscilloscopeLayout(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oscilloscopeLayout)
    }
    
    /// `UINib(name: "RealtimeChartLayout", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.realtimeChartLayout) instead")
    static func realtimeChartLayout(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.realtimeChartLayout)
    }
    
    /// `UINib(name: "RealtimeGhostTracesLayout", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.realtimeGhostTracesLayout) instead")
    static func realtimeGhostTracesLayout(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.realtimeGhostTracesLayout)
    }
    
    /// `UINib(name: "RealtimeTickingStockChartLayout", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.realtimeTickingStockChartLayout) instead")
    static func realtimeTickingStockChartLayout(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.realtimeTickingStockChartLayout)
    }
    
    /// `UINib(name: "SCDLoadingView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.scdLoadingView) instead")
    static func scdLoadingView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.scdLoadingView)
    }
    
    /// `UINib(name: "SCSExampleTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.scsExampleTableViewCell) instead")
    static func scsExampleTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.scsExampleTableViewCell)
    }
    
    /// `UINib(name: "SingleChartLayout", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.singleChartLayout) instead")
    static func singleChartLayout(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.singleChartLayout)
    }
    
    /// `UINib(name: "SinglePieChartWithLegendLayout", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.singlePieChartWithLegendLayout) instead")
    static func singlePieChartWithLegendLayout(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.singlePieChartWithLegendLayout)
    }
    
    /// `UINib(name: "SyncMultipleChartsLayout", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.syncMultipleChartsLayout) instead")
    static func syncMultipleChartsLayout(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.syncMultipleChartsLayout)
    }
    
    /// `UINib(name: "UsingThemeManagerLayout", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.usingThemeManagerLayout) instead")
    static func usingThemeManagerLayout(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.usingThemeManagerLayout)
    }
    
    static func addPointsPerformanceLayout(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.addPointsPerformanceLayout.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func addRemoveSeriesChartLayout(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.addRemoveSeriesChartLayout.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func customCursorViewSwift(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomCursorViewSwift? {
      return R.nib.customCursorViewSwift.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomCursorViewSwift
    }
    
    static func customModifierLayout(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.customModifierLayout.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func customTooltipViewSwift(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomTooltipViewSwift? {
      return R.nib.customTooltipViewSwift.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomTooltipViewSwift
    }
    
    static func heatmapChartLayout(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.heatmapChartLayout.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func launchScreenIpad(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.launchScreenIpad.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func multiPaneStockChartLayout(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.multiPaneStockChartLayout.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func oscilloscopeLayout(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.oscilloscopeLayout.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func realtimeChartLayout(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.realtimeChartLayout.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func realtimeGhostTracesLayout(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.realtimeGhostTracesLayout.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func realtimeTickingStockChartLayout(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.realtimeTickingStockChartLayout.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func scdLoadingView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.scdLoadingView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func scsExampleTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SCSExampleTableViewCell? {
      return R.nib.scsExampleTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SCSExampleTableViewCell
    }
    
    static func singleChartLayout(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.singleChartLayout.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func singlePieChartWithLegendLayout(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.singlePieChartWithLegendLayout.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func syncMultipleChartsLayout(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.syncMultipleChartsLayout.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func usingThemeManagerLayout(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.usingThemeManagerLayout.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `SCSExampleTableViewCell`.
    static let scsExampleTableViewCell: Rswift.ReuseIdentifier<SCSExampleTableViewCell> = Rswift.ReuseIdentifier(identifier: "SCSExampleTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `SCSListChartsController`, and contains static references to 1 segues.
    struct scsListChartsController {
      /// Segue identifier `ShowChartSegueId`.
      static let showChartSegueId: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SCSListChartsController, SCSChartViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowChartSegueId")
      
      /// Optionally returns a typed version of segue `ShowChartSegueId`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showChartSegueId(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SCSListChartsController, SCSChartViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.scsListChartsController.showChartSegueId, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _LaunchScreenIpad.validate()
      try _OscilloscopeLayout.validate()
    }
    
    struct _AddPointsPerformanceLayout: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddPointsPerformanceLayout"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _AddRemoveSeriesChartLayout: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddRemoveSeriesChartLayout"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _CustomCursorViewSwift: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomCursorViewSwift"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomCursorViewSwift? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomCursorViewSwift
      }
      
      fileprivate init() {}
    }
    
    struct _CustomModifierLayout: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomModifierLayout"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _CustomTooltipViewSwift: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomTooltipViewSwift"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomTooltipViewSwift? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomTooltipViewSwift
      }
      
      fileprivate init() {}
    }
    
    struct _HeatmapChartLayout: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HeatmapChartLayout"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _LaunchScreenIpad: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LaunchScreen~ipad"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "LineChart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LineChart' is used in nib 'LaunchScreen~ipad', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MultiPaneStockChartLayout: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MultiPaneStockChartLayout"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _OscilloscopeLayout: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OscilloscopeLayout"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "FlipHorizontally", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'FlipHorizontally' is used in nib 'OscilloscopeLayout', but couldn't be loaded.") }
        if UIKit.UIImage(named: "FlipVertically", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'FlipVertically' is used in nib 'OscilloscopeLayout', but couldn't be loaded.") }
        if UIKit.UIImage(named: "I", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'I' is used in nib 'OscilloscopeLayout', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Rotate", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Rotate' is used in nib 'OscilloscopeLayout', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _RealtimeChartLayout: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RealtimeChartLayout"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _RealtimeGhostTracesLayout: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RealtimeGhostTracesLayout"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _RealtimeTickingStockChartLayout: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RealtimeTickingStockChartLayout"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SCDLoadingView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SCDLoadingView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SCSExampleTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SCSExampleTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "SCSExampleTableViewCell"
      let name = "SCSExampleTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SCSExampleTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SCSExampleTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SingleChartLayout: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SingleChartLayout"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SinglePieChartWithLegendLayout: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SinglePieChartWithLegendLayout"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SyncMultipleChartsLayout: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SyncMultipleChartsLayout"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _UsingThemeManagerLayout: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UsingThemeManagerLayout"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "LineChart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LineChart' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Home' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
